// <auto-generated />
using System;
using CcsSso.DbPersistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CcsSso.Core.DbMigrations.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211224054428_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Application")
                        .HasColumnType("text");

                    b.Property<string>("Device")
                        .HasColumnType("text");

                    b.Property<string>("Event")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventTimeUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceData")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.BulkUploadDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BulkUploadStatus")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("DocUploadId")
                        .HasColumnType("text");

                    b.Property<string>("FileKey")
                        .HasColumnType("text");

                    b.Property<string>("FileKeyId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("OrganisationId")
                        .HasColumnType("text");

                    b.Property<string>("ValidationErrorDetails")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileKeyId")
                        .IsUnique();

                    b.ToTable("BulkUploadDetail");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.CcsService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("ActivateOrganisations")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("GlobalLevelOrganisationAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceClientId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<string>("ServiceUrl")
                        .HasColumnType("text");

                    b.Property<long>("TimeOutLength")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CcsService");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.CcsServiceLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CcsServiceId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("IdamUserLoginId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("TimedOut")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CcsServiceId");

                    b.HasIndex("IdamUserLoginId");

                    b.ToTable("CcsServiceLogin");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.ExternalServiceRoleMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CcsServiceId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationEligibleRoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CcsServiceId");

                    b.HasIndex("OrganisationEligibleRoleId");

                    b.ToTable("ExternalServiceRoleMapping");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.IdamUserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CcsLoginDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CcsLogoutDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ClientDevice")
                        .HasColumnType("text");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<int>("IdentityProviderId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<bool>("LoginSuccessful")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdentityProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("IdamUserLogin");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.IdamUserLoginRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CcsAccessRoleId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdamUserLoginId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CcsAccessRoleId");

                    b.HasIndex("IdamUserLoginId");

                    b.HasIndex("UserId");

                    b.ToTable("IdamUserLoginRole");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.OrganisationEligibleIdentityProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("IdentityProviderId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdentityProviderId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationEligibleIdentityProvider");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.OrganisationEligibleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CcsAccessRoleId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("MfaEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CcsAccessRoleId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationEligibleRole");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.OrganisationGroupEligibleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationEligibleRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationUserGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationEligibleRoleId");

                    b.HasIndex("OrganisationUserGroupId");

                    b.ToTable("OrganisationGroupEligibleRole");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.ServicePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CcsServiceId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("ServicePermissionName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CcsServiceId");

                    b.ToTable("ServicePermission");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.ServiceRolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CcsAccessRoleId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("ServicePermissionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CcsAccessRoleId");

                    b.HasIndex("ServicePermissionId");

                    b.ToTable("ServiceRolePermission");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.SiteContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssignedContactType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactPointId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("OriginalContactId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContactPointId");

                    b.ToTable("SiteContact");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.UserIdentityProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationEligibleIdentityProviderId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationEligibleIdentityProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("UserIdentityProvider");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.CcsAccessRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CcsAccessRoleDescription")
                        .HasColumnType("text");

                    b.Property<string>("CcsAccessRoleName")
                        .HasColumnType("text");

                    b.Property<string>("CcsAccessRoleNameKey")
                        .HasColumnType("text");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("MfaEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("OrgTypeEligibility")
                        .HasColumnType("integer");

                    b.Property<int>("SubscriptionTypeEligibility")
                        .HasColumnType("integer");

                    b.Property<int>("TradeEligibility")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CcsAccessRole");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EffectiveTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ContactDetail");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.ContactPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssignedContactType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("ContactDetailId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactPointReasonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSite")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("OriginalContactPointId")
                        .HasColumnType("integer");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<int>("PartyTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("SiteName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailId");

                    b.HasIndex("ContactPointReasonId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PartyTypeId");

                    b.ToTable("ContactPoint");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.ContactPointReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactPointReason");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.EnterpriseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("EnterpriseTypeName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EnterpriseType");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.IdentityProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("ExternalIdpFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("IdpConnectionName")
                        .HasColumnType("text");

                    b.Property<string>("IdpName")
                        .HasColumnType("text");

                    b.Property<string>("IdpUri")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("IdentityProvider");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BusinessType")
                        .HasColumnType("text");

                    b.Property<int?>("CcsServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("CiiOrganisationId")
                        .HasColumnType("text");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSme")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVcse")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("LegalName")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationUri")
                        .HasColumnType("text");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<bool?>("RightToBuy")
                        .HasColumnType("boolean");

                    b.Property<int?>("SupplierBuyerType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CcsServiceId");

                    b.HasIndex("CiiOrganisationId");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.ToTable("Organisation");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.OrganisationAccessRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("OrganisationAccessRoleDescription")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationAccessRoleName")
                        .HasColumnType("text");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationAccessRole");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.OrganisationEnterpriseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("EnterpriseTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseTypeId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationEnterpriseType");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.OrganisationUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("MfaEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<string>("UserGroupName")
                        .HasColumnType("text");

                    b.Property<string>("UserGroupNameKey")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationUserGroup");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("PartyTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PartyTypeId");

                    b.ToTable("Party");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.PartyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("PartyTypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PartyType");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<int>("Title")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.ToTable("Person");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.PhysicalAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("ContactDetailId")
                        .HasColumnType("integer");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<string>("Uprn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailId")
                        .IsUnique();

                    b.ToTable("PhysicalAddress");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.ProcurementGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("ProcurementGroup");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.TradingOrganisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<string>("TradingName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("TradingOrganisation");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AccountVerified")
                        .HasColumnType("boolean");

                    b.Property<int?>("CcsServiceId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("MfaEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<int>("UserTitle")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CcsServiceId");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.HasIndex("UserName");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.UserAccessRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationEligibleRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationEligibleRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccessRole");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.UserGroupMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MembershipEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("MembershipStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrganisationUserGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationUserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupMembership");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserSettingTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("UserSettingValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserSettingTypeId");

                    b.ToTable("UserSetting");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.UserSettingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserSettingName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserSettingType");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.VirtualAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("ContactDetailId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("VirtualAddressTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("VirtualAddressValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailId");

                    b.HasIndex("VirtualAddressTypeId");

                    b.ToTable("VirtualAddress");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.VirtualAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ConcurrencyKey")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastUpdatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VirtualAddressType");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.CcsServiceLogin", b =>
                {
                    b.HasOne("CcsSso.Core.DbModel.Entity.CcsService", "CcsService")
                        .WithMany("CcsServiceLogins")
                        .HasForeignKey("CcsServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.Core.DbModel.Entity.IdamUserLogin", "IdamUserLogin")
                        .WithMany("CcsServiceLogins")
                        .HasForeignKey("IdamUserLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CcsService");

                    b.Navigation("IdamUserLogin");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.ExternalServiceRoleMapping", b =>
                {
                    b.HasOne("CcsSso.Core.DbModel.Entity.CcsService", "CcsService")
                        .WithMany("ExternalServiceRoleMappings")
                        .HasForeignKey("CcsServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.Core.DbModel.Entity.OrganisationEligibleRole", "OrganisationEligibleRole")
                        .WithMany("ExternalServiceRoleMappings")
                        .HasForeignKey("OrganisationEligibleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CcsService");

                    b.Navigation("OrganisationEligibleRole");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.IdamUserLogin", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.IdentityProvider", "IdentityProvider")
                        .WithMany("IdamUserLogins")
                        .HasForeignKey("IdentityProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.User", "User")
                        .WithMany("IdamUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.IdamUserLoginRole", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.CcsAccessRole", "CcsAccessRole")
                        .WithMany("IdamUserLoginRoles")
                        .HasForeignKey("CcsAccessRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.Core.DbModel.Entity.IdamUserLogin", null)
                        .WithMany("IdamUserLoginRoles")
                        .HasForeignKey("IdamUserLoginId");

                    b.HasOne("CcsSso.DbModel.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CcsAccessRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.OrganisationEligibleIdentityProvider", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.IdentityProvider", "IdentityProvider")
                        .WithMany()
                        .HasForeignKey("IdentityProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.Organisation", "Organisation")
                        .WithMany("OrganisationEligibleIdentityProviders")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityProvider");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.OrganisationEligibleRole", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.CcsAccessRole", "CcsAccessRole")
                        .WithMany("OrganisationEligibleRoles")
                        .HasForeignKey("CcsAccessRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.Organisation", "Organisation")
                        .WithMany("OrganisationEligibleRoles")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CcsAccessRole");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.OrganisationGroupEligibleRole", b =>
                {
                    b.HasOne("CcsSso.Core.DbModel.Entity.OrganisationEligibleRole", "OrganisationEligibleRole")
                        .WithMany()
                        .HasForeignKey("OrganisationEligibleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.OrganisationUserGroup", "OrganisationUserGroup")
                        .WithMany("GroupEligibleRoles")
                        .HasForeignKey("OrganisationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganisationEligibleRole");

                    b.Navigation("OrganisationUserGroup");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.ServicePermission", b =>
                {
                    b.HasOne("CcsSso.Core.DbModel.Entity.CcsService", "CcsService")
                        .WithMany("ServicePermissions")
                        .HasForeignKey("CcsServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CcsService");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.ServiceRolePermission", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.CcsAccessRole", "CcsAccessRole")
                        .WithMany("ServiceRolePermissions")
                        .HasForeignKey("CcsAccessRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.Core.DbModel.Entity.ServicePermission", "ServicePermission")
                        .WithMany("ServiceRolePermissions")
                        .HasForeignKey("ServicePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CcsAccessRole");

                    b.Navigation("ServicePermission");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.SiteContact", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.ContactPoint", "ContactPoint")
                        .WithMany("SiteContacts")
                        .HasForeignKey("ContactPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactPoint");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.UserIdentityProvider", b =>
                {
                    b.HasOne("CcsSso.Core.DbModel.Entity.OrganisationEligibleIdentityProvider", "OrganisationEligibleIdentityProvider")
                        .WithMany("UserIdentityProviders")
                        .HasForeignKey("OrganisationEligibleIdentityProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.User", "User")
                        .WithMany("UserIdentityProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganisationEligibleIdentityProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.ContactPoint", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.ContactDetail", "ContactDetail")
                        .WithMany("ContactPoints")
                        .HasForeignKey("ContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.ContactPointReason", "ContactPointReason")
                        .WithMany("ContactPoints")
                        .HasForeignKey("ContactPointReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.Party", "Party")
                        .WithMany("ContactPoints")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.PartyType", "PartyType")
                        .WithMany()
                        .HasForeignKey("PartyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactDetail");

                    b.Navigation("ContactPointReason");

                    b.Navigation("Party");

                    b.Navigation("PartyType");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.Organisation", b =>
                {
                    b.HasOne("CcsSso.Core.DbModel.Entity.CcsService", "CcsService")
                        .WithMany("CreatedOrganisations")
                        .HasForeignKey("CcsServiceId");

                    b.HasOne("CcsSso.DbModel.Entity.Party", "Party")
                        .WithOne("Organisation")
                        .HasForeignKey("CcsSso.DbModel.Entity.Organisation", "PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CcsService");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.OrganisationAccessRole", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.Organisation", "Organisation")
                        .WithMany("OrganisationAccessRoles")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.OrganisationEnterpriseType", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.EnterpriseType", "EnterpriseType")
                        .WithMany("OrganisationEnterpriseTypes")
                        .HasForeignKey("EnterpriseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.Organisation", "Organisation")
                        .WithMany("OrganisationEnterpriseTypes")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnterpriseType");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.OrganisationUserGroup", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.Organisation", "Organisation")
                        .WithMany("UserGroups")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.Party", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.PartyType", "PartyType")
                        .WithMany("Party")
                        .HasForeignKey("PartyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartyType");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.Person", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.Organisation", "Organisation")
                        .WithMany("People")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.Party", "Party")
                        .WithOne("Person")
                        .HasForeignKey("CcsSso.DbModel.Entity.Person", "PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.PhysicalAddress", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.ContactDetail", "ContactDetail")
                        .WithOne("PhysicalAddress")
                        .HasForeignKey("CcsSso.DbModel.Entity.PhysicalAddress", "ContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactDetail");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.ProcurementGroup", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.TradingOrganisation", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.Organisation", "Organisation")
                        .WithMany("TradingOrganisations")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.User", b =>
                {
                    b.HasOne("CcsSso.Core.DbModel.Entity.CcsService", "CcsService")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CcsServiceId");

                    b.HasOne("CcsSso.DbModel.Entity.Party", "Party")
                        .WithOne("User")
                        .HasForeignKey("CcsSso.DbModel.Entity.User", "PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CcsService");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.UserAccessRole", b =>
                {
                    b.HasOne("CcsSso.Core.DbModel.Entity.OrganisationEligibleRole", "OrganisationEligibleRole")
                        .WithMany()
                        .HasForeignKey("OrganisationEligibleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.User", "User")
                        .WithMany("UserAccessRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganisationEligibleRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.UserGroupMembership", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.OrganisationUserGroup", "OrganisationUserGroup")
                        .WithMany("UserGroupMemberships")
                        .HasForeignKey("OrganisationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.User", "User")
                        .WithMany("UserGroupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganisationUserGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.UserSetting", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.UserSettingType", "UserSettingType")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserSettingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserSettingType");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.VirtualAddress", b =>
                {
                    b.HasOne("CcsSso.DbModel.Entity.ContactDetail", "ContactDetail")
                        .WithMany("VirtualAddresses")
                        .HasForeignKey("ContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CcsSso.DbModel.Entity.VirtualAddressType", "VirtualAddressType")
                        .WithMany("VirtualAddresses")
                        .HasForeignKey("VirtualAddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactDetail");

                    b.Navigation("VirtualAddressType");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.CcsService", b =>
                {
                    b.Navigation("CcsServiceLogins");

                    b.Navigation("CreatedOrganisations");

                    b.Navigation("CreatedUsers");

                    b.Navigation("ExternalServiceRoleMappings");

                    b.Navigation("ServicePermissions");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.IdamUserLogin", b =>
                {
                    b.Navigation("CcsServiceLogins");

                    b.Navigation("IdamUserLoginRoles");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.OrganisationEligibleIdentityProvider", b =>
                {
                    b.Navigation("UserIdentityProviders");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.OrganisationEligibleRole", b =>
                {
                    b.Navigation("ExternalServiceRoleMappings");
                });

            modelBuilder.Entity("CcsSso.Core.DbModel.Entity.ServicePermission", b =>
                {
                    b.Navigation("ServiceRolePermissions");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.CcsAccessRole", b =>
                {
                    b.Navigation("IdamUserLoginRoles");

                    b.Navigation("OrganisationEligibleRoles");

                    b.Navigation("ServiceRolePermissions");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.ContactDetail", b =>
                {
                    b.Navigation("ContactPoints");

                    b.Navigation("PhysicalAddress");

                    b.Navigation("VirtualAddresses");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.ContactPoint", b =>
                {
                    b.Navigation("SiteContacts");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.ContactPointReason", b =>
                {
                    b.Navigation("ContactPoints");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.EnterpriseType", b =>
                {
                    b.Navigation("OrganisationEnterpriseTypes");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.IdentityProvider", b =>
                {
                    b.Navigation("IdamUserLogins");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.Organisation", b =>
                {
                    b.Navigation("OrganisationAccessRoles");

                    b.Navigation("OrganisationEligibleIdentityProviders");

                    b.Navigation("OrganisationEligibleRoles");

                    b.Navigation("OrganisationEnterpriseTypes");

                    b.Navigation("People");

                    b.Navigation("TradingOrganisations");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.OrganisationUserGroup", b =>
                {
                    b.Navigation("GroupEligibleRoles");

                    b.Navigation("UserGroupMemberships");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.Party", b =>
                {
                    b.Navigation("ContactPoints");

                    b.Navigation("Organisation");

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.PartyType", b =>
                {
                    b.Navigation("Party");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.User", b =>
                {
                    b.Navigation("IdamUserLogins");

                    b.Navigation("UserAccessRoles");

                    b.Navigation("UserGroupMemberships");

                    b.Navigation("UserIdentityProviders");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.UserSettingType", b =>
                {
                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("CcsSso.DbModel.Entity.VirtualAddressType", b =>
                {
                    b.Navigation("VirtualAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
